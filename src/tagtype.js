//Note: both key and value should be small caps. For each value there is a corresponding icon in popup.css
const TAGS = {
    html4: [
        "a",
        "abbr",
        "address",
        "area",
        "b",
        "base",
        "bdo",
        "blockquote",
        "body",
        "br",
        "button",
        "caption",
        "cite",
        "code",
        "col",
        "colgroup",
        "dd",
        "del",
        "dfn",
        "dialog",
        "div",
        "dl",
        "dt",
        "em",
        "fieldset",
        "form",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "head",
        "hr",
        "html",
        "i",
        "iframe",
        "img",
        "input",
        "ins",
        "kbd",
        "label",
        "legend",
        "li",
        "link",
        "map",
        "meta",
        "noscript",
        "object",
        "ol",
        "optgroup",
        "option",
        "p",
        "param",
        "pre",
        "q",
        "s",
        "samp",
        "script",
        "select",
        "small",
        "span",
        "strong",
        "style",
        "sub",
        "sup",
        "table",
        "tbody",
        "td",
        "textarea",
        "tfoot",
        "th",
        "thead",
        "title",
        "tr",
        "u",
        "ul",
        "var"
    ],
    obsolete: [
        "acronym",
        "applet",
        "basefont",
        "bgsound",
        "big",
        "blink",
        "center",
        "dir",
        "font",
        "frame",
        "frameset",
        "hgroup",
        "isindex",
        "listing",
        "marquee",
        "nobr",
        "noframes",
        "plaintext",
        "spacer",
        "strike",
        "tt",
        "xmp",
    ],
    html5: [
        "article",
        "aside",
        "audio",
        "bdi",
        "canvas",
        "data",
        "datalist",
        "details",
        "embed",
        "figcaption",
        "figure",
        "footer",
        "header",
        "keygen",
        "main",
        "mark",
        "menu",
        "menuitem",
        "meter",
        "nav",
        "output",
        "picture",
        "progress",
        "rp",
        "rt",
        "ruby",
        "section",
        "source",
        "summary",
        "time",
        "track",
        "video",
        "wbr"
    ],
    draft: [
        "content",
        "decorator",
        "element",
        "shadow",
        "template",
    ],
    svg: [
        "altglyph",
        "altglyphdef",
        "altglyphitem",
        "animate",
        "animatecolor",
        "animatemotion",
        "animatetransform",
        "circle",
        "clippath",
        "color-profile",
        "cursor",
        "defs",
        "desc",
        "ellipse",
        "feblend",
        "fecolormatrix",
        "fecomponenttransfer",
        "fecomposite",
        "feconvolvematrix",
        "fediffuselighting",
        "fedisplacementmap",
        "fedistantlight",
        "feflood",
        "fefunca",
        "fefuncb",
        "fefuncg",
        "fefuncr",
        "fegaussianblur",
        "feimage",
        "femerge",
        "femergenode",
        "femorphology",
        "feoffset",
        "fepointlight",
        "fespecularlighting",
        "fespotlight",
        "fetile",
        "feturbulence",
        "filter",
        "font-face",
        "font-face-format",
        "font-face-name",
        "font-face-src",
        "font-face-uri",
        "foreignobject",
        "g",
        "glyph",
        "glyphref",
        "hkern",
        "image",
        "line",
        "lineargradient",
        "marker",
        "mask",
        "metadata",
        "missing-glyph",
        "mpath",
        "path",
        "pattern",
        "polygon",
        "polyline",
        "radialgradient",
        "rect",
        "set",
        "stop",
        "svg",
        "switch",
        "symbol",
        "text",
        "textpath",
        "tref",
        "tspan",
        "use",
        "view",
        "vkern"
    ]
};

function reverseDb(db) {
    const res = {};
    Object.keys(db).forEach(k => {
        db[k].forEach(t => res[t] = k);
    });
}

/**
 * Get a tag and returns its type.
 * @param tagName {string} the tag name to lookup. It doesn't have to be upper case because it'll be normalized.
 * @returns {string} returns the type of tag
 */
export function tagType (tagName) {
    //normalize the parameter to be used in the lookup
    const notmalizedTagName = tagName.trim().toLowerCase();
    //this will automatically return undefined when the tag doesn't exist in the lookup table
    for (let type in TAGS) {
        if (TAGS[type].indexOf(notmalizedTagName) !== -1) {
            return type;
        }
    }
    return 'unknown';
}